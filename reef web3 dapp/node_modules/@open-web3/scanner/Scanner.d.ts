import { HeaderExtended } from '@polkadot/api-derive/types';
import { StorageKey, Vec } from '@polkadot/types';
import { ValidatorId } from '@polkadot/types/interfaces';
import { EventRecord } from '@polkadot/types/interfaces/system';
import { Observable } from 'rxjs';
import GenericEvent from './GenericEvent';
import { Block, BlockAt, BlockAtOptions, Bytes, ChainInfo, Confirmation, Event, Extrinsic, Header, Meta, RuntimeVersion, ScannerOptions, SubcribeOptions, SubscribeBlock, SubscribeBlockError, WsProvider } from './types';
declare class Scanner {
    private rpcProvider;
    private knownTypes;
    private metadataRequest;
    wsProvider: WsProvider;
    chainInfo: Record<string, ChainInfo>;
    constructor(options: ScannerOptions);
    private createMethodSubscribe;
    getBlockDetail(_blockAt?: BlockAtOptions): Promise<Block>;
    getHeader(header: Header, _blockAt: BlockAtOptions, meta: Meta): Promise<HeaderExtended>;
    getRuntimeVersion(blockHash?: Bytes): Promise<RuntimeVersion>;
    getBlockHash(at: number | Bytes): Promise<Bytes>;
    getBlockAt(blockAt?: {
        blockHash?: Bytes;
        blockNumber?: number;
    }): Promise<BlockAt>;
    getParentHash(_blockHash?: Bytes): Promise<Bytes>;
    getSpecTypes(version: RuntimeVersion): {
        GenericEvent: typeof GenericEvent;
    };
    getChainInfo(_blockAt?: BlockAtOptions): Promise<ChainInfo>;
    getSessionValidators(_blockAt: BlockAtOptions): Promise<Vec<ValidatorId> | []>;
    getEvents(_blockAt: BlockAtOptions, meta: Meta): Promise<Vec<EventRecord>>;
    getEventData(event: EventRecord, index: number): Event;
    getStorageValue<T>(storageKey: StorageKey, _blockAt: BlockAtOptions): Promise<T>;
    decodeTx(txData: Bytes, _blockAt: BlockAtOptions, meta: Meta): Omit<Extrinsic, 'result'>;
    subscribeNewBlockNumber(confirmation?: Confirmation): Observable<number>;
    subscribe(options?: SubcribeOptions): Observable<SubscribeBlock | SubscribeBlockError>;
}
export default Scanner;
