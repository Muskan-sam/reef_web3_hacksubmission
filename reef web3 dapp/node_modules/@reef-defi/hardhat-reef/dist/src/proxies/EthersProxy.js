"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const plugins_1 = require("hardhat/plugins");
const utils_1 = require("../utils");
const EthersSigner_1 = require("./signers/EthersSigner");
class default_1 {
    constructor(_hre) {
        this.eth = _hre.ethers;
        this.hre = _hre;
    }
    async getSigner(address) {
        const ethSigner = await this.eth.getSigner(address);
        return EthersSigner_1.EthersSigner.create(ethSigner);
    }
    async getSigners() {
        const ethSigners = await this.eth.getSigners();
        const singers = await Promise.all(ethSigners.map(async (signer) => EthersSigner_1.EthersSigner.create(signer)));
        return singers;
    }
    async getSignerByName(name) {
        const signers = await this.getSigners();
        if (!(name in signerNames)) {
            (0, utils_1.throwError)("Signer name does not exist!");
        }
        return signers[signerNames[name]];
    }
    async getContractAt(nameOrAbi, address, signer) {
        return this.eth.getContractAt(nameOrAbi, address, signer);
    }
    async getContractFactory(contractName, signer) {
        const wallet = await this.resolveSigner(signer);
        const contract = await this.hre.artifacts.readArtifact(contractName);
        return ethers_1.ContractFactory.fromSolidity(contract).connect(wallet);
    }
    async getProvider() {
        throw new plugins_1.HardhatPluginError("Hardhat-reef", "Get provider in Ethers network is not supported...");
    }
    async verifyContract(address, name, args, customArgs) {
        console.warn("Ether proxy did not verify contract. Use hardhat ether scan library to verify contract!");
    }
    async resolveSigner(signer) {
        if (signer === undefined) {
            const signers = await this.getSigners();
            return signers[0];
        }
        if (typeof signer === "string") {
            return this.getSigner(signer);
        }
        return signer;
    }
}
exports.default = default_1;
const signerNames = ["alice", "bob", "charlie", "dave", "eve", "ferdie"].reduce((acc, name, index) => {
    acc[name] = index;
    return acc;
}, {});
//# sourceMappingURL=EthersProxy.js.map