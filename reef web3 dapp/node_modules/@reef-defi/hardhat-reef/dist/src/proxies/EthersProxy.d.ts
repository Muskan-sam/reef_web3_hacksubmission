import { Provider } from "@reef-defi/evm-provider";
import { Contract, ContractFactory } from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { CustomVerificationArguments, ProxyProvider } from "../types";
import { EthersSigner } from "./signers/EthersSigner";
import { ProxySigner } from "./signers/ProxySigner";
export default class implements ProxyProvider {
    private eth;
    private hre;
    constructor(_hre: HardhatRuntimeEnvironment);
    getSigner(address: string): Promise<EthersSigner>;
    getSigners(): Promise<EthersSigner[]>;
    getSignerByName(name: string): Promise<EthersSigner>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ProxySigner): Promise<Contract>;
    getContractFactory(contractName: string, signer?: ProxySigner | string): Promise<ContractFactory>;
    getProvider(): Promise<Provider>;
    verifyContract(address: string, name: string, args: any[], customArgs?: Partial<CustomVerificationArguments>): Promise<void>;
    private resolveSigner;
}
//# sourceMappingURL=EthersProxy.d.ts.map