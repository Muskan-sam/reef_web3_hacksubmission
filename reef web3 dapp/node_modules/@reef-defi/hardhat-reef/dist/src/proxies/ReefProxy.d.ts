import { Provider } from "@reef-defi/evm-provider";
import { Contract, ContractFactory } from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { CustomVerificationArguments, ProxyProvider } from "../types";
import { ProxySigner } from "./signers/ProxySigner";
export default class ReefProxy implements ProxyProvider {
    private static provider;
    private static wallets;
    private providerUrl;
    private scanUrl?;
    private hre;
    private seeds;
    constructor(hre: HardhatRuntimeEnvironment);
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ProxySigner): Promise<Contract>;
    getContractFactory(contractName: string, signer?: ProxySigner | string): Promise<ContractFactory>;
    getSigners(): Promise<ProxySigner[]>;
    getProvider(): Promise<Provider>;
    getSigner(address: string): Promise<ProxySigner>;
    getSignerByName(name: string): Promise<ProxySigner>;
    verifyContract(address: string, name: string, args: any[], customArgs?: Partial<CustomVerificationArguments>): Promise<void>;
    private extractLicense;
    private getWallets;
    private resolveSigner;
    private ensureSetup;
    private ensureProvider;
    private ensureWallets;
}
//# sourceMappingURL=ReefProxy.d.ts.map