"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopChain = exports.startChain = void 0;
const url_1 = require("url");
const types_1 = require("../types");
const ReefChainService_1 = __importDefault(require("./ReefChainService"));
const startChain = async (chain, config) => {
    if (chain === types_1.REEF_CHAIN) {
        const url = new url_1.URL(config.networks.reef.url);
        const free = await isPortFree(url.hostname, Number(url.port));
        if (free) {
            return ReefChainService_1.default.createService();
        }
    }
    return Promise.resolve();
};
exports.startChain = startChain;
const stopChain = async () => {
    return ReefChainService_1.default.stopService();
};
exports.stopChain = stopChain;
const isPortFree = async (host, port) => {
    return new Promise((resolve) => {
        const portscanner = require("portscanner");
        portscanner.checkPortStatus(port, host, (error, status) => {
            // Status is 'open' if currently in use or 'closed' if available
            resolve(status === "closed");
        });
    });
};
//# sourceMappingURL=chain-runner.js.map