"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TestAccountSigningKey_keyringPairs, _TestAccountSigningKey_registry;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAccountSigningKey = void 0;
let id = 0;
class TestAccountSigningKey {
    constructor(registry) {
        _TestAccountSigningKey_keyringPairs.set(this, void 0);
        _TestAccountSigningKey_registry.set(this, void 0);
        __classPrivateFieldSet(this, _TestAccountSigningKey_keyringPairs, [], "f");
        __classPrivateFieldSet(this, _TestAccountSigningKey_registry, registry, "f");
    }
    signPayload(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const findKeyringPair = __classPrivateFieldGet(this, _TestAccountSigningKey_keyringPairs, "f").find((pair) => pair.address === payload.address);
            if (!findKeyringPair) {
                throw new Error(`Can't find the keyringpair for ${payload.address}`);
            }
            return new Promise((resolve) => {
                const signed = __classPrivateFieldGet(this, _TestAccountSigningKey_registry, "f")
                    .createType('ExtrinsicPayload', payload, { version: payload.version })
                    .sign(findKeyringPair);
                resolve(Object.assign({ id: ++id }, signed));
            });
        });
    }
    addKeyringPair(...keyringPairs) {
        __classPrivateFieldSet(this, _TestAccountSigningKey_keyringPairs, __classPrivateFieldGet(this, _TestAccountSigningKey_keyringPairs, "f").concat(...keyringPairs), "f");
    }
}
exports.TestAccountSigningKey = TestAccountSigningKey;
_TestAccountSigningKey_keyringPairs = new WeakMap(), _TestAccountSigningKey_registry = new WeakMap();
//# sourceMappingURL=TestAccountSigningKey.js.map